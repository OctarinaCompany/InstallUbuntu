#!/bin/bash


# preq

sudo apt-get install -y unzip

# oh my posh


curl -s https://ohmyposh.dev/install.sh | bash -s

# fonts

# BitstreamVeraSansMono,CodeNewRoman,DroidSansMono,FiraCode,FiraMono,Go-Mono,Hack,Hermit,JetBrainsMono,Meslo,Noto,Overpass,ProggyClean,RobotoMono,SourceCodePro,SpaceMono,Ubuntu,UbuntuMono
~/.local/bin/oh-my-posh font install Meslo
PATH=$PATH:/home/sylvain/.local/bin

# Theme
mkdir ~/.poshthemes
wget https://github.com/JanDeDobbeleer/oh-my-posh/releases/latest/download/themes.zip -O ~/.poshthemes/themes.zip
unzip ~/.poshthemes/themes.zip -d ~/.poshthemes
chmod u+rw ~/.poshthemes/*.json
rm ~/.poshthemes/themes.zip

#eval "$(oh-my-posh --init --shell bash --config ~/.poshthemes/negligible.omp.json)"

# powershell

sudo snap install powershell --channel=lts/stable --classic

# configure powershell

ps_profile_dir="$HOME/.config/powershell"

mkdir -p "$ps_profile_dir"

# Install required PowerShell modules
pwsh -NonInteractive -Command "
    # Set execution policy for current user
    #Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser -Force
    
    # Install required modules
    Install-Module -Name Terminal-Icons -Repository PSGallery -Force -Scope CurrentUser
    #Install-Module -Name PSReadLine -Repository PSGallery -Force -Scope CurrentUser
    
    Write-Host 'PowerShell modules installed successfully'
" 2>/dev/null || {
    log_error "Failed to install PowerShell modules"
    exit 1
}

profile_path="$ps_profile_dir/Microsoft.PowerShell_profile.ps1"
    
cat > "$profile_path" << 'EOF'
# PowerShell Profile Configuration
# Auto-generated by PowerShell installation script

# Initialize oh-my-posh with negligible theme
#if (Get-Command ~/.local/bin/oh-my-posh -ErrorAction SilentlyContinue) {
#    ~/.local/bin/oh-my-posh --init --shell pwsh --config ~/.poshthemes/negligible.omp.json | Invoke-Expression
#}

# Import Terminal-Icons module
if (Get-Module -ListAvailable -Name Terminal-Icons) {
    Import-Module -Name Terminal-Icons
}

# Configure PSReadLine options
if (Get-Module -ListAvailable -Name PSReadLine) {
    Set-PSReadLineOption -PredictionSource History -PredictionViewStyle ListView -ErrorAction SilentlyContinue
}

# Set console encoding to UTF-8
[console]::InputEncoding = [console]::OutputEncoding = [System.Text.UTF8Encoding]::new()




# Script to display versions of installed tools
# Refactored for better readability and maintainability

# Function to display a line with name and version
function Write-VersionLine {
    param(
        [string]$Name,
        [string]$Version,
        [string]$NameColor = "Cyan",
        [string]$VersionColor = "DarkGray",
        [string]$SeparatorColor = "Gray",
        [bool]$IsLast = $false
    )
    
    # Determine color based on version content
    $actualVersionColor = if ($Version -eq "notfound") { "Red" } else { $VersionColor }
    
    Write-Host $Name -ForegroundColor $NameColor -NoNewline
    Write-Host " " -NoNewline
    Write-Host $Version -ForegroundColor $actualVersionColor -NoNewline
    
    if (-not $IsLast) {
        Write-Host ", " -ForegroundColor $SeparatorColor -NoNewline
    }
}

# Function to get Ubuntu version
function Get-UbuntuVersion {
    try {
        return (grep PRETTY_NAME /etc/os-release | cut -d'"' -f2 | awk '{print $2, $3}')
    }
    catch {
        return "notfound"
    }
}

# Function to get Python tools versions
function Get-PythonToolsVersions {
    $pythonVersion = try { (python3 --version) -replace "Python ", "" } catch { "notfound" }
    $pipVersion = try { pip --version | awk '{print $2}' } catch { "notfound" }
    $pipxVersion = try { pipx --version } catch { "notfound" }
    $uvVersion = try { (uv --version) -replace "uv ", "" } catch { "notfound" }
    $uvxVersion = try { (uvx --version) -replace "uvx ", "" } catch { "notfound" }
    
    return @{
        Python = $pythonVersion
        Pip = $pipVersion
        Pipx = $pipxVersion
        Uv = $uvVersion
        Uvx = $uvxVersion
    }
}

# Function to get Node.js tools versions
function Get-NodeToolsVersions {
    $nodeVersion = try { (node --version) -replace "v", "" } catch { "notfound" }
    $npmVersion = try { npm --version } catch { "notfound" }
    $npxVersion = try { npx --version } catch { "notfound" }
    
    return @{
        Node = $nodeVersion
        Npm = $npmVersion
        Npx = $npxVersion
    }
}

# Function to get testing tools versions
function Get-TestToolsVersions {
    $playwrightVersion = try { (npm list @playwright/test --depth=0 | Out-String).Split('@')[-1].Split()[0] } catch { "notfound" }
    $chromiumVersion = try { (~/.cache/ms-playwright/chromium-*/chrome-linux/chrome --version) -replace "Chromium ", "" } catch { "notfound" }
    
    return @{
        Playwright = $playwrightVersion
        Chromium = $chromiumVersion
    }
}

# === MAIN EXECUTION ===

# Display Ubuntu version
$ubuntuVersion = Get-UbuntuVersion
$ubuntuColor = if ($ubuntuVersion -eq "notfound") { "Red" } else { "DarkGray" }
Write-Host "ubuntu " -ForegroundColor Yellow -NoNewline
Write-Host $ubuntuVersion -ForegroundColor $ubuntuColor
Write-Host

# Display PowerShell version
$powershellVersion = try { (pwsh --version) -replace "PowerShell ", "" } catch { "notfound" }
$powershellColor = if ($powershellVersion -eq "notfound") { "Red" } else { "DarkGray" }
Write-Host "powershell " -ForegroundColor Cyan -NoNewline
Write-Host $powershellVersion -ForegroundColor $powershellColor -NoNewline
Write-Host ", " -ForegroundColor Gray

# Display Python tools versions
$pythonVersions = Get-PythonToolsVersions
Write-VersionLine "python3" $pythonVersions.Python
Write-VersionLine "pip" $pythonVersions.Pip
Write-VersionLine "pipx" $pythonVersions.Pipx
Write-VersionLine "uv" $pythonVersions.Uv
Write-VersionLine "uvx" $pythonVersions.Uvx -IsLast $true
Write-Host

# Display Node.js tools versions
$nodeVersions = Get-NodeToolsVersions
Write-VersionLine "node" $nodeVersions.Node
Write-VersionLine "npm" $nodeVersions.Npm
Write-VersionLine "npx" $nodeVersions.Npx -IsLast $true
Write-Host

# Display testing tools versions
$testVersions = Get-TestToolsVersions
Write-VersionLine "playwright" $testVersions.Playwright
Write-VersionLine "chromium" $testVersions.Chromium -IsLast $true
Write-Host

EOF